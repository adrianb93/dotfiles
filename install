#!/usr/bin/env bash

set -e

STARTING_DIR=$PWD
cd $HOME

echo '================================================================================'
echo 'Checking for dotfile updates...'
git -C $HOME/Code/dotfiles fetch origin
if [ ! $(git -C $HOME/Code/dotfiles merge-base --is-ancestor origin/master master) ]; then
    echo 'Dotfiles are outdated.'
    echo 'Would you like to update [y/n]? (you will need to re-run the install / update command after updating)'
    read WOULD_LIKE_TO_UPDATE
    if [[ "$WOULD_LIKE_TO_UPDATE" =~ ^[Yy]$ ]]; then
        if [ ! $(git -C $HOME/Code/dotfiles diff-index --quiet HEAD --) ]; then
            echo 'Dotfiles repository also contains local changes. Changes will be stashed and popped.'
            git -C $HOME/Code/dotfiles stash
            git -C $HOME/Code/dotfiles pull
            git -C $HOME/Code/dotfiles stash pop
        else
            git -C $HOME/Code/dotfiles pull
        fi
        echo 'Dotfiles have been updated. You will need to re-run the install / update.'
        exit 1
    else
        echo 'Continuing without updating the dotfiles'
    fi
else
    echo 'Dotfiles are already update to date!'
fi
echo 'Done checking for dotfile updates.'
echo '================================================================================'

if test ! $(which brew); then
    echo '================================================================================'
    echo 'Installing homebrew...'
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    echo 'Done installing homebrew.'
    echo '================================================================================'
fi

if [ ! -e $HOME/.vim/autoload/plug.vim ]; then
    echo '================================================================================'
    echo 'Installing vim-plug...'
    curl --create-dirs -fLo $HOME/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo 'Done installing vim-plug.'
    echo '================================================================================'
fi

# @see: https://intelephense.com/faq.html
if [ ! -e $HOME/intelephense/licence.txt ]; then
    echo '================================================================================'
    echo 'Setting up Intelephense license...'
    mkdir -p $HOME/intelephense
    echo 'Enter your Intelephense license key:'
    read -s INTELEPHENSE_LICENSE_KEY
    echo $INTELEPHENSE_LICENSE_KEY > $HOME/intelephense/licence.txt
    echo 'Done setting up Intelephense license.'
    echo '================================================================================'
fi

echo '================================================================================'
echo 'Linking dotfiles...'
/bin/bash $HOME/Code/dotfiles/link
echo 'Done linking dotfiles.'
echo '================================================================================'

echo '================================================================================'
echo 'Installing, updating, and cleaning up brew dependencies...'
brew bundle --global
brew bundle cleanup --force --global
brew services cleanup
sudo brew services cleanup
brew cleanup
echo 'Done installing, updating, and cleaning up brew dependencies.'
echo '================================================================================'

echo '================================================================================'
echo 'Installing and updating composer dependencies...'
composer global install
composer global update --with-all-dependencies
echo 'Done installing and updating composer dependencies.'
echo '================================================================================'

echo '================================================================================'
echo 'Installing and updating npm dependencies...'
npm install -g npm@latest pure-prompt intelephense
npm update -g
echo 'Done installing and updating npm dependencies.'
echo '================================================================================'

echo '================================================================================'
echo 'Installing and updating pecl dependencies...'
pecl update-channels
# pecl upgrade will also install if it isn't yet installed, where as pecl
# install will fail if it is installed.
pecl upgrade pcov
echo 'Done installing and updating pecl dependencies.'
echo '================================================================================'

echo '================================================================================'
echo 'Installing and updating vim-plug and its dependencies...'
vim -es -u $HOME/.vimrc -i NONE -c "PlugUpgrade" -c "qa"
vim -es -u $HOME/.vimrc -i NONE -c "PlugInstall" -c "qa"
vim -es -u $HOME/.vimrc -i NONE -c "PlugUpdate" -c "qa"
vim -es -u $HOME/.vimrc -i NONE -c "PlugClean!" -c "qa"
vim -c 'CocUpdateSync|q'
echo 'Done installing and updating vim-plug and its dependencies.'
echo '================================================================================'

echo '================================================================================'
echo 'Installing and updating FZF...'
/usr/local/opt/fzf/install --key-bindings --completion --update-rc --no-bash --no-fish
echo 'Done installing and updating FZF.'
echo '================================================================================'

echo '================================================================================'
echo 'Installing and updating terminal theme...'
curl --create-dirs -fLo $HOME/.config/kitty/dracula.conf https://raw.githubusercontent.com/dracula/kitty/master/dracula.conf
echo 'Done installing and updating terminal theme.'
echo '================================================================================'

echo '================================================================================'
echo 'Setting up a fresh Laravel playground...'
rm -rf $HOME/Code/playground
mkdir -p $HOME/Code
composer create-project laravel/laravel $HOME/Code/playground
echo 'Done setting up a fresh Laravel playground.'
echo '================================================================================'

cd $STARTING_DIR

# Additionally, if you receive “zsh compinit: insecure directories” warnings
# when attempting to load these completions, you may need to run this
# see: https://docs.brew.sh/Shell-Completion
# compaudit | xargs chmod g-w

echo 'Done!'
