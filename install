#!/usr/bin/env bash

set -e

(
    (
        STARTING_DIR=$PWD
        cd $HOME
    )

    (
        export WELCOME_OPTIONS=20
        export WELCOME_FILE="welcome-$(echo "0$((1 + $RANDOM % $WELCOME_OPTIONS))" | tail -c 3).txt"
        echo ''
        echo "$(< "$HOME/Code/dotfiles/art/$WELCOME_FILE")"
        echo ''

        echo 'We should only need the sudo password once:'
        sudo -v
    )

    if test ! $(which brew); then
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing homebrew...'
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        echo 'Done installing homebrew.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    fi

    if test ! -e $HOME/.vim/autoload/plug.vim; then
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing vim-plug...'
        curl --create-dirs -fLo $HOME/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        echo 'Done installing vim-plug.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    fi

    # @see: https://intelephense.com/faq.html
    if test ! -e $HOME/intelephense/licence.txt; then
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Setting up Intelephense license...'
        mkdir -p $HOME/intelephense
        echo 'Enter your Intelephense license key:'
        read -s INTELEPHENSE_LICENSE_KEY
        echo $INTELEPHENSE_LICENSE_KEY > $HOME/intelephense/licence.txt
        echo 'Done setting up Intelephense license.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    fi

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Linking dotfiles...'
        /bin/bash $HOME/Code/dotfiles/link
        echo 'Done linking dotfiles.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Setting macos defaults...'
        /bin/bash $HOME/Code/dotfiles/defaults
        echo 'Done setting macos defaults.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing, updating, and cleaning up brew dependencies...'
        sudo chown -R $(whoami) $(brew --prefix)/*
        brew bundle --global
        brew bundle cleanup --force --global
        brew services cleanup
        sudo brew services cleanup
        sudo brew services stop --all
        brew cleanup -s
        brew cu --all --yes
        echo 'Done installing, updating, and cleaning up brew dependencies.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing and updating npm dependencies...'
        # Prevent the installation of typewritten from echoing to .zshrc
        sudo mkdir -p /usr/local/share/zsh
        sudo mkdir -p /usr/local/share/zsh/site-functions
        sudo chmod a+rwx /usr/local/share/zsh/site-functions

        npm install -g \
            npm@latest \
            spaceship-prompt \
            typewritten \
            @vue/cli \
            git-trim

        npm update -g
        echo 'Done installing and updating npm dependencies.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing and updating composer dependencies...'
        # Prevents composer from invalidating our sudo session
        export COMPOSER_ALLOW_SUPERUSER=1
        composer global update --with-all-dependencies
        export COMPOSER_ALLOW_SUPERUSER=0
        # sudo valet install
        sudo valet trust
        echo 'Done installing and updating composer dependencies.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing and updating pecl dependencies...'
        pecl update-channels
        # pecl upgrade will also install if it isn't yet installed, where as pecl
        # install will fail if it is installed.
        # pecl upgrade pcov
        echo 'Done installing and updating pecl dependencies.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing and updating FZF...'
        $(brew --prefix)/opt/fzf/install --key-bindings --completion --update-rc --no-bash --no-fish
        echo 'Done installing and updating FZF.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Installing and updating fz...'
        curl --create-dirs -fLo $HOME/.bin/fz.sh https://raw.githubusercontent.com/changyuheng/fz/master/fz.sh
        echo 'Done installing and updating fz.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    # $HOME/.vim/plugged/phpactor/bin/phpactor cache:clear

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Setting up zsh completion...'
        rm -f $HOME/.zcompdump
        brew completions link
        echo 'Done setting up zsh completion.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Clean dependency manager caches...'
        composer clear-cache
        npm cache clean --force
        yarn cache clean --all
        echo 'Done additional dependency manager caches.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Remove VIM plugins so that they are updated to the latest on next open...'
        rm -rf $HOME/.config/coc/ $HOME/.vim/plugged/
        echo 'Done VIM plugins so that they are updated to the latest on next open'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Misc configurations...'
        # Suppress the compinit error caused from us preventing the double .zshrc echo for typewritten earlier
        sudo chmod 755 /usr/local/share/zsh/site-functions
        sudo chown -R root:staff /usr/local/share/zsh
        echo 'Done misc configurations.'
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    (
        echo ''
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        echo 'Manual Steps:'
        echo ''
        echo "$(< $HOME/Code/dotfiles/installed.md)"
        echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    )

    # If you receive “zsh compinit: insecure directories” warnings when
    # attempting to load these completions, you may need to run this:
    # see: https://docs.brew.sh/Shell-Completion
    # compaudit | xargs chmod g-w

    (
        echo ''
        echo 'Done!'
        cd $STARTING_DIR
    )
)
