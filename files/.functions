# Easy update for dotfiles
function update() {
    bash $HOME/Code/dotfiles/install
}

# Open jira ticket for the branch or for the given ticket number
function jira() {
    TICKET_NUMBER=${${1}##DEV-}

    if [ -z "${TICKET_NUMBER}" ]; then
        TICKET_NUMBER=$(git symbolic-ref HEAD 2>/dev/null | cut -d/ -f4 | cut -d- -f2)
    fi

    if [ -n "${TICKET_NUMBER}" ]; then
        open "https://xxxxxx.atlassian.net/browse/DEV-${TICKET_NUMBER}"
    else
        open "https://xxxxxx.atlassian.net/secure/RapidBoard.jspa?rapidView=6&projectKey=DEV&view=planning.nodetail&quickFilter=22&quickFilter=24&epics=visible&issueLimit=100"
    fi
}

# Open database based on Laravel env variables.
function opendb () {
    [ ! -f .env ] && { echo "No .env file found."; exit 1; }

    DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2- | tr -d '"' | tr -d "'")
    DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2- | tr -d '"' | tr -d "'")
    DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2- | tr -d '"' | tr -d "'")
    DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2- | tr -d '"' | tr -d "'")
    DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2- | tr -d '"' | tr -d "'")
    DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2- | tr -d '"' | tr -d "'")

    if [ "$DB_CONNECTION" != "mysql" ] && [ "$DB_CONNECTION" != "pgsql" ] && [ "$DB_CONNECTION" != "sqlite" ]; then
        DB_CONNECTION='mysql'
    fi

    DB_URL="${DB_CONNECTION}://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}"

    echo "Opening ${DB_URL}"
    open $DB_URL
}

function test() {
    (php artisan) > /dev/null

    if [ $? -eq 0 ]; then
        args=("$@")

        # Use --recreate-databases when running in parallel.
        if [[ " ${args[*]} " =~ " --parallel " || " ${args[*]} " =~ " -p " ]]; then
            if [[ ! " ${args[*]} " =~ " --recreate-databases " ]]; then
                args+=("--recreate-databases")
            fi
        fi

        php artisan test $args
    elif [ -f vendor/bin/pest ]; then
        vendor/bin/pest "$@"
    elif [ -f vendor/bin/phpunit ]; then
        vendor/bin/phpunit "$@"
    else
        phpunit "$@"
    fi
}

function ptest() {
    args=("$@")

    if [[ ! " ${args[*]} " =~ " --parallel " ]]; then
        args+=("--parallel")
    fi

    test $args
}

function archive() {
    zip -r "$1".zip -i "$1" ;
}

function silent() {
    "$@" >& /dev/null
}

function cores() {
    pids=()
    cores=$(sysctl hw.physicalcpu hw.logicalcpu | grep 'physical' | sed 's/[^0-9]*//g')

    if [[ $# -eq 0 ]]; then
        echo $cores
        return
    fi

    killall() {
        trap '' SIGINT # Prevent `ctrl+c` from triggering killall again.
        for pid in "${pids[@]}"; do
            kill -0 "$pid" && kill "$pid"
        done
    }
    trap killall SIGINT
    for i in `seq $cores`; do {
        $@ & pids+=("$!")
    } done
    wait $pids
    trap SIGINT
}

function qwork() {
    cores php artisan queue:work --tries 1 --backoff 5 --queue urgent,schedule,workflows,default,invites,database,reports,extended
}

function qmonitor() {
    php artisan queue:monitor default,high,medium,low,extended,reports
}
